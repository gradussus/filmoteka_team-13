{"mappings":"AAAA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,aACjCC,SAAUF,SAASC,cAAc,YACjCE,eAAgBH,SAASC,cAAc,qBACvCG,aAAcJ,SAASC,cAAc,UACrCI,QAASL,SAASC,cAAc,iBAChCK,WAAYN,SAASC,cAAc,qBACnCM,UAAWP,SAASQ,eAAe,cACnCC,iBAAkBT,SAASC,cAAc,iBACzCS,KAAMV,SAASC,cAAc,sBAC7BU,yBAA0BX,SAASC,cAAc,kBACjDW,iBAAkBZ,SAASC,cAAc,UACzCY,iBAAkBb,SAASC,cAAc,aACzCa,gBAAiBd,SAASC,cAAc,mBACxCc,qBAAsBf,SAASC,cAAc,yBAC7Ce,cAAehB,SAASC,cAAc,qBACtCgB,mBAAoBjB,SAASC,cAAc,wBCYtC,SAASiB,EAAUC,EAAWC,GACnC,MAAMC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,WACzCC,EAAY,GAElB,IACE,IAAIC,EAAa,EACjBA,EAAaP,GAAkBO,EAAaR,EAAUS,OACtDD,IAEA,IAAK,MAAME,KAASR,EACdF,EAAUQ,KAAgBE,EAAMC,IAClCJ,EAAUK,KAAKF,EAAMG,MAI3B,OAAyB,IAArBN,EAAUE,OACL,kBAELT,EAAUS,OAASR,GACrBM,EAAUK,KAAK,SAGVL,EAAUO,KAAK,M,CAGjB,SAASC,EAAmBC,GACjCA,EACGC,KAAI,EAACC,YAAEA,EAAWlB,UAAEA,EAASmB,MAAEA,EAAKC,aAAEA,EAAYT,GAAEA,KAC5C,mCAAmCA,iHAEkBO,UAAoBC,2IAG1CA,uGAEMpB,EAAUC,mHAGtCoB,EAAaC,MAAM,EAAG,IAAM,+FAM7CC,SAAQC,GAAK5C,EAAKQ,WAAWqC,mBAAmB,YAAaD,I,CCnElE,MAAME,EAAU,ICLD,MAObC,cACMrB,aAAaC,QAAQ,mBACvBqB,KAAKC,kBAAoBzB,KAAKC,MAC5BC,aAAaC,QAAQ,kB,CAM3BuB,mBACMxB,aAAaC,QAAQ,iBACvBqB,KAAKG,gBAAkB3B,KAAKC,MAAMC,aAAaC,QAAQ,gB,CAK3DyB,kBAAkBC,GACZ3B,aAAaC,QAAQ,mBACvBqB,KAAKC,kBAAoBzB,KAAKC,MAC5BC,aAAaC,QAAQ,mBAGzBqB,KAAKC,kBAAkBhB,KAAKoB,GAC5BL,KAAKM,kB,CAEPC,gBAAgBF,GACV3B,aAAaC,QAAQ,iBACvBqB,KAAKG,gBAAkB3B,KAAKC,MAAMC,aAAaC,QAAQ,iBAEzDqB,KAAKG,gBAAgBlB,KAAKoB,GAC1BL,KAAKQ,gB,CAGPF,mBACE5B,aAAa+B,QACX,gBACAjC,KAAKkC,UAAUV,KAAKC,mB,CAIxBO,iBACE9B,aAAa+B,QAAQ,cAAejC,KAAKkC,UAAUV,KAAKG,iB,CAG1DQ,qBACE,GAAKjC,aAAaC,QAAQ,iBAI1B,OAAOH,KAAKC,MAAMC,aAAaC,QAAQ,iB,CAEzCiC,oBACE,GAAKlC,aAAaC,QAAQ,eAI1B,OAAOH,KAAKC,MAAMC,aAAaC,QAAQ,e,CA9DzCkC,cACEb,KAAKC,kBAAoB,GACzBD,KAAKG,gBAAkB,GACvBH,KAAKD,cACLC,KAAKE,kB,GDETd,EAAmBU,EAAQa,sBAEVzD,SAASC,cAAc,iBAE/B2D,iBAAiB,SAE1B,WACE9D,EAAKQ,WAAWuD,UAAY,GAC5B3B,EAAmBU,EAAQc,oB","sources":["src/js/refs.js","src/js/voprim.js","src/library.js","src/js/watched-queue.js"],"sourcesContent":["const refs = {\n  backdrop: document.querySelector('.backdrop'),\n  teamLink: document.querySelector('.js-team'),\n  spinerBackdrop: document.querySelector('.spiner__backdrop'),\n  filmsListRef: document.querySelector('.films'),\n  gallery: document.querySelector('.gallery__set'),\n  libGallery: document.querySelector('.lib-gallery__set'),\n  container: document.getElementById('pagination'),\n  galleryGenreItem: document.querySelector('.film__genres'),\n  form: document.querySelector('.header-film__form'),\n  closeModalBtnForOneMovie: document.querySelector('.modal__button'),\n  modalForOneMovie: document.querySelector('.modal'),\n  backdropOneMovie: document.querySelector('.backdrop'),\n  btnAddToWatched: document.querySelector('.btn__modal-add'),\n  btnRemoveFromWatched: document.querySelector('.btn__modal-r-watched'),\n  btnAddToQuene: document.querySelector('.btn__modal-queue'),\n  btnRemoveFromQuene: document.querySelector('.btn__modal-r-queue'),\n};\n\nexport { refs };\n","import { refs } from './refs';\n// import TrendingMovies from './MykolaPom';\n\n// функция отрисовки топ фильмов\nexport function renderFilmsMarkup(films) {\n  films\n    .map(({ poster_path, genre_ids, title, release_date, id }) => {\n      return `<li class=\"films__item\" data-id=${id}>\n                <div class=\"films__img\">\n                    <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${title}\" loading=\"lazy\">\n                </div>\n                <div class=\"films__description\">\n                  <p class=\"films__title\">${title}</p>\n                  <div class=\"films__meta\">\n                    <span class=\"films__genres\">${getGenres(\n                      genre_ids,\n                      3\n                    )}</span>\n                    <span class=\"films__sep\">|</span>\n                    <span class=\"films__data\">${\n                      release_date.slice(0, 4) || 'No info'\n                    }</span>\n                  </div>\n                </div>\n            </li>`;\n    })\n    .forEach(c => refs.gallery.insertAdjacentHTML('beforeend', c));\n}\nexport function getGenres(genre_ids, maxGenresShown) {\n  const genres = JSON.parse(localStorage.getItem('genres'));\n  const genresArr = [];\n\n  for (\n    let genreIndex = 0;\n    genreIndex < maxGenresShown && genreIndex < genre_ids.length;\n    genreIndex++\n  ) {\n    for (const value of genres) {\n      if (genre_ids[genreIndex] === value.id) {\n        genresArr.push(value.name);\n      }\n    }\n  }\n  if (genresArr.length === 0) {\n    return 'No genres info';\n  }\n  if (genre_ids.length > maxGenresShown) {\n    genresArr.push('Other');\n  }\n\n  return genresArr.join(', ');\n}\n\nexport function renderFilmsLibrary(films) {\n  films\n    .map(({ poster_path, genre_ids, title, release_date, id }) => {\n      return `<li class=\"films__item\" data-id=${id}>\n                <div class=\"films__img\">\n                    <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${title}\" loading=\"lazy\">\n                </div>\n                <div class=\"films__description\">\n                  <p class=\"films__title\">${title}</p>\n                  <div class=\"films__meta\">\n                    <span class=\"films__genres\">${getGenres(genre_ids)}</span>\n                    <span class=\"films__sep\">|</span>\n                    <span class=\"films__data\">${\n                      release_date.slice(0, 4) || 'No year info'\n                    }</span>\n                  </div>\n                </div>\n            </li>`;\n    })\n    .forEach(c => refs.libGallery.insertAdjacentHTML('beforeend', c));\n}\n\n// функция отрисовки жанров\n\n// export function renderGenres(renderGenresFilms) {\n//   let genreString;\n//   renderGenresFilms.map(film => {\n//     const filmGenres = film.genre_ids;\n//     let array = [];\n\n//     //console.log('filmGenres', filmGenres);\n//     filmGenres.map(genre => {\n//       const filmGenre = localStorage.getItem(genre);\n//       array.push(filmGenre);\n//       genreString = array.join(', ');\n//     });\n//   });\n//   //refs.galleryGenreItem.textContent = 777;\n//   return genreString;\n// }\n\n// // Функция записи жанров в локалсторедж\n// export async function getGenres() {\n//   const trendingMovies = new TrendingMovies();\n//   try {\n//     const result = await trendingMovies.fetchGenresIds();\n//     for (const genre of result) {\n//       localStorage.setItem(`${genre.id}`, `${genre.name}`);\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// lib-gallery-render-func\n","// Федір, твори магію)\nimport { refs } from './js/refs';\nimport { renderFilmsLibrary } from './js/voprim';\nimport FilmsStorage from './js/watched-queue';\n\nconst storage = new FilmsStorage();\n\nrenderFilmsLibrary(storage.getWathedFilmsList());\n\nconst queueBtn = document.querySelector('.queue-button');\n\nqueueBtn.addEventListener('click', onQueueBtnClick);\n\nfunction onQueueBtnClick() {\n  refs.libGallery.innerHTML = '';\n  renderFilmsLibrary(storage.getQueueFilmsList());\n}\n","export default class FilmsStorage {\n  constructor() {\n    this._watchedFilmsList = [];\n    this._queueFilmsList = [];\n    this.refreshData();\n    this.refreshDataQueue();\n  }\n  refreshData() {\n    if (localStorage.getItem('watched-films')) {\n      this._watchedFilmsList = JSON.parse(\n        localStorage.getItem('watched-films')\n      );\n    }\n    //console.log('пусто');\n  }\n\n  refreshDataQueue() {\n    if (localStorage.getItem('queue-films')) {\n      this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    }\n    //console.log('пусто');\n  }\n\n  addToWatchedFilms(item) {\n    if (localStorage.getItem('watched-films')) {\n      this._watchedFilmsList = JSON.parse(\n        localStorage.getItem('watched-films')\n      );\n    }\n    this._watchedFilmsList.push(item);\n    this.saveWatchedFilms();\n  }\n  addToQueueFilms(item) {\n    if (localStorage.getItem('queue-films')) {\n      this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    }\n    this._queueFilmsList.push(item);\n    this.saveQueueFilms();\n  }\n\n  saveWatchedFilms() {\n    localStorage.setItem(\n      'watched-films',\n      JSON.stringify(this._watchedFilmsList)\n    );\n  }\n\n  saveQueueFilms() {\n    localStorage.setItem('queue-films', JSON.stringify(this._queueFilmsList));\n  }\n\n  getWathedFilmsList() {\n    if (!localStorage.getItem('watched-films')) {\n      return;\n    }\n    // this._watchedFilmsList = JSON.parse(localStorage.getItem('watched-films'));\n    return JSON.parse(localStorage.getItem('watched-films'));\n  }\n  getQueueFilmsList() {\n    if (!localStorage.getItem('queue-films')) {\n      return;\n    }\n    // this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    return JSON.parse(localStorage.getItem('queue-films'));\n  }\n}\n\n//const storage = new FilmsStorage();\n\n//const addToWatchedBtn = document.querySelector('.btn__modal-add');\n\n//addToWatchedBtn.addEventListener('click', addToLS);\n\n//function addToLS() {\n//  console.log(1);\n//}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","backdrop","document","querySelector","teamLink","spinerBackdrop","filmsListRef","gallery","libGallery","container","getElementById","galleryGenreItem","form","closeModalBtnForOneMovie","modalForOneMovie","backdropOneMovie","btnAddToWatched","btnRemoveFromWatched","btnAddToQuene","btnRemoveFromQuene","$f848a7cb11af0776$export$c5604fa8028da00","genre_ids","maxGenresShown","genres","JSON","parse","localStorage","getItem","genresArr","genreIndex","length","value","id","push","name","join","$f848a7cb11af0776$export$1385a8623dbdd01b","films","map","poster_path","title","release_date","slice","forEach","c","insertAdjacentHTML","$ce3726a01b8ab25a$var$storage","refreshData","this","_watchedFilmsList","refreshDataQueue","_queueFilmsList","addToWatchedFilms","item","saveWatchedFilms","addToQueueFilms","saveQueueFilms","setItem","stringify","getWathedFilmsList","getQueueFilmsList","constructor","addEventListener","innerHTML"],"version":3,"file":"library.634c4f40.js.map"}