{"mappings":"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","sources":["src/js/refs.js","src/js/voprim.js","node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/watched-queue.js","src/library.js"],"sourcesContent":["const refs = {\n  backdrop: document.querySelector('.backdrop'),\n  teamLink: document.querySelector('.js-team'),\n  spinerBackdrop: document.querySelector('.spiner__backdrop'),\n  filmsListRef: document.querySelector('.films'),\n  gallery: document.querySelector('.gallery__set'),\n  libGallery: document.querySelector('.lib-gallery__set'),\n  container: document.getElementById('pagination'),\n  galleryGenreItem: document.querySelector('.film__genres'),\n  form: document.querySelector('.header-film__form'),\n  closeModalBtnForOneMovie: document.querySelector('.modal__button'),\n  modalForOneMovie: document.querySelector('.modal'),\n  backdropOneMovie: document.querySelector('.backdrop'),\n  btnAddToWatched: document.querySelector('.btn__modal-add'),\n  btnRemoveFromWatched: document.querySelector('.btn__modal-r-watched'),\n  btnAddToQuene: document.querySelector('.btn__modal-queue'),\n  btnRemoveFromQuene: document.querySelector('.btn__modal-r-queue'),\n};\n\nexport { refs };\n","import { refs } from './refs';\n// import TrendingMovies from './MykolaPom';\n\n// функция отрисовки топ фильмов\nexport function renderFilmsMarkup(films) {\n  films\n    .map(({ poster_path, genre_ids, title, release_date, id }) => {\n      return `<li class=\"films__item\" data-id=${id}>\n                <div class=\"films__img\">\n                    <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${title}\" loading=\"lazy\">\n                </div>\n                <div class=\"films__description\">\n                  <p class=\"films__title\">${title}</p>\n                  <div class=\"films__meta\">\n                    <span class=\"films__genres\">${getGenres(\n                      genre_ids,\n                      3\n                    )}</span>\n                    <span class=\"films__sep\">|</span>\n                    <span class=\"films__data\">${\n                      release_date.slice(0, 4) || 'No info'\n                    }</span>\n                  </div>\n                </div>\n            </li>`;\n    })\n    .forEach(c => refs.gallery.insertAdjacentHTML('beforeend', c));\n}\nexport function getGenres(genre_ids, maxGenresShown) {\n  const genres = JSON.parse(localStorage.getItem('genres'));\n  const genresArr = [];\n\n  for (\n    let genreIndex = 0;\n    genreIndex < maxGenresShown && genreIndex < genre_ids.length;\n    genreIndex++\n  ) {\n    for (const value of genres) {\n      if (genre_ids[genreIndex] === value.id) {\n        genresArr.push(value.name);\n      }\n    }\n  }\n  if (genresArr.length === 0) {\n    return 'No genres info';\n  }\n  if (genre_ids.length > maxGenresShown) {\n    genresArr.push('Other');\n  }\n\n  return genresArr.join(', ');\n}\n\nexport function renderFilmsLibrary(films) {\n  films\n    .map(({ poster_path, genre_ids, title, release_date, id }) => {\n      return `<li class=\"films__item\" data-id=${id}>\n                <div class=\"films__img\">\n                    <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${title}\" loading=\"lazy\">\n                </div>\n                <div class=\"films__description\">\n                  <p class=\"films__title\">${title}</p>\n                  <div class=\"films__meta\">\n                    <span class=\"films__genres\">${getGenres(genre_ids)}</span>\n                    <span class=\"films__sep\">|</span>\n                    <span class=\"films__data\">${\n                      release_date.slice(0, 4) || 'No year info'\n                    }</span>\n                  </div>\n                </div>\n            </li>`;\n    })\n    .forEach(c => refs.libGallery.insertAdjacentHTML('beforeend', c));\n}\n\n// функция отрисовки жанров\n\n// export function renderGenres(renderGenresFilms) {\n//   let genreString;\n//   renderGenresFilms.map(film => {\n//     const filmGenres = film.genre_ids;\n//     let array = [];\n\n//     //console.log('filmGenres', filmGenres);\n//     filmGenres.map(genre => {\n//       const filmGenre = localStorage.getItem(genre);\n//       array.push(filmGenre);\n//       genreString = array.join(', ');\n//     });\n//   });\n//   //refs.galleryGenreItem.textContent = 777;\n//   return genreString;\n// }\n\n// // Функция записи жанров в локалсторедж\n// export async function getGenres() {\n//   const trendingMovies = new TrendingMovies();\n//   try {\n//     const result = await trendingMovies.fetchGenresIds();\n//     for (const genre of result) {\n//       localStorage.setItem(`${genre.id}`, `${genre.name}`);\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// lib-gallery-render-func\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","export default class FilmsStorage {\n  constructor() {\n    this._watchedFilmsList = [];\n    this._queueFilmsList = [];\n    this.refreshData();\n    this.refreshDataQueue();\n  }\n  refreshData() {\n    if (localStorage.getItem('watched-films')) {\n      this._watchedFilmsList = JSON.parse(\n        localStorage.getItem('watched-films')\n      );\n    }\n    //console.log('пусто');\n  }\n\n  refreshDataQueue() {\n    if (localStorage.getItem('queue-films')) {\n      this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    }\n    return;\n  }\n\n  addToWatchedFilms(item) {\n    if (localStorage.getItem('watched-films')) {\n      this._watchedFilmsList = JSON.parse(\n        localStorage.getItem('watched-films')\n      );\n    }\n    this._watchedFilmsList.push(item);\n    this.saveWatchedFilms();\n  }\n\n  myAddToQueueFilms(film) {\n    if (localStorage.getItem('queue-films')) {\n      this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    }\n\n    this._queueFilmsList.push(film);\n    localStorage.setItem('queue-films', JSON.stringify(this._queueFilmsList));\n  }\n\n  addToQueueFilms(item) {\n    if (localStorage.getItem('queue-films')) {\n      this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    }\n    this._queueFilmsList.push(item);\n    this.saveQueueFilms();\n  }\n\n  saveWatchedFilms() {\n    localStorage.setItem(\n      'watched-films',\n      JSON.stringify(this._watchedFilmsList)\n    );\n  }\n\n  saveQueueFilms() {\n    localStorage.setItem('queue-films', JSON.stringify(this._queueFilmsList));\n  }\n\n  getWathedFilmsList() {\n    if (!localStorage.getItem('watched-films')) {\n      return;\n    }\n    // this._watchedFilmsList = JSON.parse(localStorage.getItem('watched-films'));\n    return JSON.parse(localStorage.getItem('watched-films'));\n  }\n  getQueueFilmsList() {\n    if (!localStorage.getItem('queue-films')) {\n      return;\n    }\n    // this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    return JSON.parse(localStorage.getItem('queue-films'));\n  }\n  removeFromWatched(film) {\n    if (!localStorage.getItem('watched-films')) {\n      return;\n    }\n    this._watchedFilmsList = JSON.parse(localStorage.getItem('watched-films'));\n    const index = this._watchedFilmsList.findIndex(\n      option => option.title === film.title\n    );\n    this._watchedFilmsList.splice(index, 1);\n    this.saveWatchedFilms();\n  }\n  removeFromQueue(film) {\n    if (!localStorage.getItem('queue-films')) {\n      return;\n    }\n    this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    const index = this._queueFilmsList.findIndex(\n      option => option.title === film.title\n    );\n    this._queueFilmsList.splice(index, 1);\n    this.saveQueueFilms();\n  }\n\n  checkFilmInWatchedLocStor(film) {\n    if (!localStorage.getItem('watched-films')) {\n      return;\n    }\n    this._watchedFilmsList = JSON.parse(localStorage.getItem('watched-films'));\n    const answer = this._watchedFilmsList.find(\n      option => option.title === film.title\n    );\n    if (answer) {\n      return true;\n    }\n    return false;\n  }\n\n  checkFilmInQueueLocStor(film) {\n    if (!localStorage.getItem('queue-films')) {\n      return;\n    }\n    this._queueFilmsList = JSON.parse(localStorage.getItem('queue-films'));\n    const answer = this._queueFilmsList.find(\n      option => option.title === film.title\n    );\n    if (answer) {\n      return true;\n    }\n    return false;\n  }\n}\n\n//const storage = new FilmsStorage();\n\n//const addToWatchedBtn = document.querySelector('.btn__modal-add');\n\n//addToWatchedBtn.addEventListener('click', addToLS);\n\n//function addToLS() {\n//  console.log(1);\n//}\n","// Федір, твори магію)\nimport { refs } from './js/refs';\nimport { renderFilmsLibrary } from './js/voprim';\nimport FilmsStorage from './js/watched-queue';\n\nconst storage = new FilmsStorage();\n\nrenderFilmsLibrary(storage.getWathedFilmsList());\n\nconst queueBtn = document.querySelector('.queue-button');\n\nqueueBtn.addEventListener('click', onQueueBtnClick);\n\nfunction onQueueBtnClick() {\n  refs.libGallery.innerHTML = '';\n  renderFilmsLibrary(storage.getQueueFilmsList());\n}\n"],"names":["$37e33676934ad046$export$21666b427502ea6d","backdrop","document","querySelector","teamLink","spinerBackdrop","filmsListRef","gallery","libGallery","container","getElementById","galleryGenreItem","form","closeModalBtnForOneMovie","modalForOneMovie","backdropOneMovie","btnAddToWatched","btnRemoveFromWatched","btnAddToQuene","btnRemoveFromQuene","$f1b5ea32af53b705$export$c5604fa8028da00","genre_ids","maxGenresShown","genres","JSON","parse","localStorage","getItem","genresArr","genreIndex","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","id","push","name","err","return","join","$f1b5ea32af53b705$export$1385a8623dbdd01b","films","map","param","poster_path","title","release_date","concat","slice","forEach","c","insertAdjacentHTML","Object","defineProperty","$665014edacbfe17b$exports","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$cecbdd76f2d3d4bd$var$storage","FilmsStorage","this","_watchedFilmsList","_queueFilmsList","refreshData","refreshDataQueue","item","saveWatchedFilms","film","setItem","stringify","saveQueueFilms","index","findIndex","option","splice","find","getWathedFilmsList","addEventListener","innerHTML","getQueueFilmsList"],"version":3,"file":"library.fe9946fe.js.map"}